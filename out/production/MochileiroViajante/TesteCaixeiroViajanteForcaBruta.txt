import java.util.ArrayList;
import java.util.Random;

class App {

    public static void main(String[] args) {
        
        int numeroVertices = 5;
        long start;
        long tempoDecorrido;
        long tempoMedio = 0;
        long[] tempos = new long[70];
        do{
            System.out.println("Numero de vertices: " + numeroVertices);
            int[][] m = grafoCompletoPonderado(numeroVertices);
            for(int i = 0; i < 70; i++){
                start = System.currentTimeMillis();
                CaixeiroViajanteForcaBruta bruto = new CaixeiroViajanteForcaBruta(m);
                ArrayList<Integer> melhorCaminho = bruto.encontrarMelhorCaminho();
                tempoDecorrido = System.currentTimeMillis() - start;
                tempos[i] = tempoDecorrido;
            }
            tempoMedio = calculatempoMedio(tempos);
            System.out.println("tempo médio " + tempoMedio + " Em minutos" + converteParaMinuto(tempoMedio) );
            numeroVertices++;
        }while(tempoMedio < 240000 );

        System.out.println("\n \n  resultado para fazer o relatório \n \n");
        System.out.println("número de vertices: " +  (numeroVertices - 1));
        
               
    }

         /**
     * Aleatório "fixo" para geração de testes repetitíveis
     */
    static Random aleatorio = new Random(42);
    
    /**
     * Retorna uma matriz quadrada de "vertices" x "vertices" com números inteiros,
     * representando um grafo completo. A diagonal principal está preenchida com 
     * valor -1, indicando que não há aresta.
     * @param vertices A quantidade de vértices do grafo.
     * @return Matriz quadrada com custos de movimentação entre os vértices.
     */
    public static int[][] grafoCompletoPonderado(int vertices){
        int[][] matriz = new int[vertices][vertices];
        int valor;
        for (int i = 0; i < matriz.length; i++) {
            matriz[i][i]=-1;         
            for (int j = i+1; j < matriz.length; j++) {
                valor = aleatorio.nextInt(25)+1;
                matriz[i][j] = valor;
                matriz[j][i] = valor;
            }
        }  
        return matriz;
    }

    public static void printMatriz(int[][] m){
        for(int i = 0; i < m.length; i++ ){
            for(int j = 0; j < m[0].length; j++ ){
                System.out.print(m[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void printValorDaDistancia(ArrayList<Integer> caminho, int[][] m){
        int distancia = 0;
        for(int i = 0; i < caminho.size()-1; i++ ){
            distancia += m[caminho.get(i)][caminho.get(i + 1)];
        }

        System.out.println("A menor distancia tem: " + distancia );
    }

    public static double converteParaMinuto(Long mili){

        return mili/60000;
    }

    public static long calculatempoMedio(long[] tempos){
        long soma = 0;
        for (long l : tempos) {
            soma = soma + l;
        }
        return soma / tempos.length;
    }
}